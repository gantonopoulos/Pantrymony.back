AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda to API-Gateway endpoints mapper for Pantrymony

Parameters:
  stage:
    Type: String
    Default: dev
  region:
    Type: String
    Default: eu-central-1
  account:
    Type: String
    Default: '926574008245'
  imageBucket:
    Type: String
    Default: "pantrymony-image-store"

Globals:
  Function:
    Timeout: 120
    MemorySize: 512
    Tracing: Active
    Environment:
      Variables:
        VICTUALS_TABLE: !Sub "Victuals-${stage}"
        AUTH_DOMAIN: "gantonopoulos.eu.auth0.com"
        JWKS_URL: "https://gantonopoulos.eu.auth0.com/.well-known/jwks.json"
        IMAGES_S3_BUCKET: !Sub "${imageBucket}-${stage}"
        SIGNED_URL_EXPIRATION_MINUTES: 30
    
Resources:
  PantrymonyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthorizeUser.Arn
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*'
          HttpMethod: '*'
      #            Identity:
      #              ReauthorizeEvery: 0 # Setting TTL to 0 to disable caching the authorizer's requests. lambda Service Default: 300
      BinaryMediaTypes:
        - image~1png
        - image~1jpeg
      TracingEnabled: true
      Models:
        Victual:
          type: object
          required:
            - UserId
            - VictualId
            - Calories
            - Carbs
            - Expires
            - Fat
            - Name
            - Protein
            - Quantity
            - Unit
          properties:
            UserId:
              type: string
            VictualId:
              type: string
            Calories:
              type: integer
            Carbs:
              type: integer
            Expires:
              type: string
            Fat:
              type: number
            Name:
              type: string
            Protein:
              type: integer
            Quantity:
              type: integer
            Unit:
              type: string        
                  

  AuthorizeUser:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: Pantrymony.back::Pantrymony.back.Lambda.Auth.Authorizer::AuthorizeAsync
      Runtime: dotnet6
      Policies:
        - AWSXRayDaemonWriteAccess
      Description: Lambda handler for authentication
      

  GetUnits:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: Pantrymony.back::Pantrymony.back.Lambda.ApiFunctions::GetUnits
      Runtime: dotnet6
      Description: A Lambda to return the supported units
      Policies:
        - AWSXRayDaemonWriteAccess
      Events:
        GetVictualsApi:
          Type: Api
          Properties:
            RestApiId: !Ref PantrymonyApi
            Path: /units
            Method: get

  Options:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: Pantrymony.back::Pantrymony.back.Lambda.ApiFunctions::Options
      Runtime: dotnet6
      Description: A Lambda to return the supported units
      MemorySize: 512
      Timeout: 60
      Policies:
        - AWSXRayDaemonWriteAccess
      Events:
        GetVictualsApi:
          Type: Api
          Properties:
            Auth:
              Authorizer: NONE
            RestApiId: !Ref PantrymonyApi
            Path: /{proxy+}
            Method: options
      
  
  VictualsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: VictualId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: VictualId
          AttributeType: S
        - AttributeName: Expires
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: Victuals-dev
      LocalSecondaryIndexes:
        - IndexName: Expiration_Index
          KeySchema:
            - AttributeName: UserId
              KeyType: HASH
            - AttributeName: Expires
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
  
  DeleteVictual:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler:  Pantrymony.back::Pantrymony.back.Lambda.ApiFunctions::DeleteVictual
      Runtime: dotnet6
      Description: Lambda to delete a victual
      Events:
        GetVictualsApi:
          Type: Api
          Properties:
            RestApiId: !Ref PantrymonyApi
            Path: /deletevictual
            Method: delete
            RequestParameters:
              - method.request.querystring.userId:
                  Required: true
              - method.request.querystring.victualId:
                  Required: true
            RequestModel:
              Model: Victual
              Required: true
              ValidateParameters: true
      Policies:
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Sid:  DeleteVictualPolicy
              Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:DeleteItem
              Resource: !Sub 'arn:aws:dynamodb:${region}:${account}:table/Victuals-dev'
                  
  GetUserVictuals:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: Pantrymony.back::Pantrymony.back.Lambda.ApiFunctions::GetUserVictuals
      Runtime: dotnet6
      Description: A Lambda to return the victuals registered under a certain user with a certain victualId
      Events:
        GetVictualsApi:
          Type: Api
          Properties:
            RestApiId: !Ref PantrymonyApi
            Path: /uservictuals
            Method: get
            RequestParameters:
              - method.request.querystring.userId:
                  Required: true
            RequestModel:
              Model: Victual
              Required: true
              ValidateParameters: true
      Policies:                
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Sid: GetUserVictualsPolicy
              Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:Query
              Resource: !Sub 'arn:aws:dynamodb:${region}:${account}:table/Victuals-dev'
                
  GetUserVictual:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: Pantrymony.back::Pantrymony.back.Lambda.ApiFunctions::GetUserVictual
      Runtime: dotnet6
      Description: A Lambda to return the victuals registered under a certain user with a certain victualId
      Events:
        GetVictualsApi:
          Type: Api
          Properties:
            RestApiId: !Ref PantrymonyApi
            Path: /uservictual
            Method: get
            RequestParameters:
              - method.request.querystring.userId:
                  Required: true
              - method.request.querystring.victualId:
                  Required: true
            RequestModel:
              Model: Victual
              Required: true
              ValidateParameters: true
      Policies:
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Sid: GetVictualPolicy
              Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:Query
              Resource: !Sub 'arn:aws:dynamodb:${region}:${account}:table/Victuals-dev'
                
  PostVictual:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler:  Pantrymony.back::Pantrymony.back.Lambda.ApiFunctions::PostVictual
      Runtime: dotnet6
      Description: Lambda handler inserting a new Victual in the db
      Events:
        GetVictualsApi:
          Type: Api
          Properties:
            RestApiId: !Ref PantrymonyApi
            Path: /createvictual
            Method: post
            RequestModel:
              Model: Victual
              Required: true
              ValidateBody: true
      Policies:
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Sid:  PostVictualPolicy
              Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:UpdateItem
              Resource: !Sub 'arn:aws:dynamodb:${region}:${account}:table/Victuals-dev'
    
  PutVictual:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: Pantrymony.back::Pantrymony.back.Lambda.ApiFunctions::PutVictual
      Runtime: dotnet6
      Description: Lambda handler inserting a new Victual in the db
      Events:
        GetVictualsApi:
          Type: Api
          Properties:
            RestApiId: !Ref PantrymonyApi
            Path: /updatevictual
            Method: put
            RequestParameters:
              - method.request.querystring.userId:
                  Required: true
              - method.request.querystring.victualId:
                  Required: true
            RequestModel:
              Model: Victual
              Required: true
              ValidateBody: true
              ValidateParameters: true
      Policies:
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Sid:  PutVictualPolicy
              Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !Sub 'arn:aws:dynamodb:${region}:${account}:table/Victuals-dev'

              
  GetSignedUploadUrl:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler:  Pantrymony.back::Pantrymony.back.Lambda.ApiFunctions::GetSignedUploadUrl      
      Runtime: dotnet6
      Description: Lambda handler returning a Signed-Url to upload files to the S3 bucket
      Events:
        GetVictualsApi:
          Type: Api
          Properties:
            RestApiId: !Ref PantrymonyApi
            Path: /uploadImageUrl
            Method: get
            RequestParameters:
              - method.request.querystring.imageKey:
                  Required: true
            RequestModel:
              Model: Victual
              Required: true
              ValidateParameters: true

      Policies:
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Sid:  GetSignedUploadUrlPolicy
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::${imageBucket}-${stage}/*"
              
  GetSignedDownloadUrl:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler:  Pantrymony.back::Pantrymony.back.Lambda.ApiFunctions::GetSignedDownloadUrl
      Runtime: dotnet6
      Description: Lambda handler returning a Signed-Url to download files from the S3 bucket
      Events:
        GetVictualsApi:
          Type: Api
          Properties:
            RestApiId: !Ref PantrymonyApi
            Path: /downloadImageUrl
            Method: get
            RequestParameters:
              - method.request.querystring.imageKey:
                  Required: true
            RequestModel:
              Model: Victual
              Required: true              
              ValidateParameters: true
      Policies:
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Sid:  GetSignedDownloadUrlPolicy
              Effect: Allow
              Action: 
                - s3:GetObject
                - s3:ListBucket
              Resource: !Sub "arn:aws:s3:::${imageBucket}-${stage}/*"
  GetSignedDeleteUrl:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler:  Pantrymony.back::Pantrymony.back.Lambda.ApiFunctions::GetSignedDeleteUrl
      Runtime: dotnet6
      Description: Lambda handler returning a Signed-Url to delete files from the S3 bucket
      Events:
        GetVictualsApi:
          Type: Api
          Properties:
            RestApiId: !Ref PantrymonyApi
            Path: /deleteImageUrl
            Method: get
            RequestParameters:
              - method.request.querystring.imageKey:
                  Required: true
            RequestModel:
              Model: Victual
              Required: true
              ValidateParameters: true
      Policies:
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Sid:  GetSignedDeleteUrlPolicy
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
              Resource: !Sub "arn:aws:s3:::${imageBucket}-${stage}/*"

  ImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${imageBucket}-${stage}"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000
    
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: ThirdPartyBucketAccess
            Effect: Allow
            Principal: '*'
            Action: 
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: !Sub "arn:aws:s3:::${imageBucket}-${stage}/*"
      Bucket: !Ref ImagesBucket    


Outputs:
  BucketName:
    Value: !Ref ImagesBucket
    Description: Name of the sample Amazon S3 bucket with CORS enabled.
    
#Outputs:
#  PantrymonyApi:
#    Description: URL of your API endpoint
#    Value: !Join
#      - ''
#      - - https://
#        - !Ref Pantrymony
#        - '.execute-api.'
#        - !Ref 'AWS::Region'
#        - '.amazonaws.com/dev'           
